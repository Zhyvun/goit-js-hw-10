Завдання - пошук країн
Створи фронтенд частину програми пошуку даних про країну за її частковою або повною назвою.
 Подивися демо-відео роботи програми.

HTTP-запит
Використовуй публічний API Rest Countries v2, а саме ресурс name, який повертає масив об'єктів країн, 
що задовольнили критерій пошуку. Додай мінімальне оформлення елементів інтерфейсу.
Напиши функцію fetchCountries(name), яка робить HTTP-запит на ресурс name і повертає проміс з масивом країн - результатом запиту. 
Винеси її в окремий файл fetchCountries.js і зроби іменований експорт.

Фільтрація полів
У відповіді від бекенду повертаються об'єкти, велика частина властивостей яких, тобі не знадобиться. 
Щоб скоротити обсяг переданих даних, додай рядок параметрів запиту - таким чином цей бекенд реалізує фільтрацію полів. 
Ознайомся з документацією синтаксису фільтрів.
Тобі потрібні тільки наступні властивості:
    name.official - повна назва країни
    capital - столиця
    population - населення
    flags.svg - посилання на зображення прапора
    languages - масив мов

Поле пошуку
Назву країни для пошуку користувач вводить у текстове поле input#search-box. HTTP-запити виконуються при введенні назви країни, 
тобто на події input. Але робити запит з кожним натисканням клавіші не можна, оскільки одночасно буде багато запитів 
і вони будуть виконуватися в непередбачуваному порядку.
Необхідно застосувати прийом Debounce на обробнику події і робити HTTP-запит через 300мс після того, як користувач перестав вводити текст.
Використовуй пакет lodash.debounce.
Якщо користувач повністю очищає поле пошуку, то HTTP-запит не виконується, а розмітка списку країн або інформації про країну зникає.
Виконай санітизацію введеного рядка методом trim(), це вирішить проблему, коли в полі введення тільки пробіли, 
або вони є на початку і в кінці рядка.

Інтерфейс (*2.6)
Якщо у відповіді бекенд повернув більше ніж 10 країн, в інтерфейсі з'являється повідомлення про те, що назва повинна бути специфічнішою.
Для повідомлень використовуй бібліотеку notiflix і виводь такий рядок "Too many matches found. Please enter a more specific name."

Обробка помилки (*2.5.)
Якщо користувач ввів назву країни, якої не існує, бекенд поверне не порожній масив, а помилку зі статус кодом 404 - не знайдено. 
Якщо це не обробити, то користувач ніколи не дізнається про те, що пошук не дав результатів. Додай повідомлення 
"Oops, there is no country with that name" у разі помилки, використовуючи бібліотеку notiflix.

🙂 ВИКОНАННЯ:
файл. fetchCountries.js
1. Створили функцію запиту на сервер 
1.1. Використовуємо функцію серверного запиту fetch повертає проміс 
(зберігаються дані які сервер нам віддав) В методі "then" виконуємо перевірку статусу даних. 
Якщо отримуємо помилку відповіді - записуємо (ловимо), інакше => приводимо до номального вигляду 
парсимо і перетворююємо у валідний JS ).

файл index.js
2. Імпортуємо необхідні бібліотеки, підключаємо файл 
2.1. Створюємо змінні
2.2. Вішаємо слухача на input 
2.3. Створюємо запит на сервер та отримуємо результат,
- санітизація введеного рядка методом trim()
- передаємо функцію на слухача застосуючи прийом Debounce
- створбємо умову очистки поля Input - clearMarkup()
2.4. Якщо користувач повністю очищає поле пошуку, то HTTP-запит не виконується, а розмітка списку країн або інформації про країну зникає. 
innerHTML - простий і швидкий спосіб видалення всього вмісту 🙂
2.5. Створюємо функцію Обробки помилки.
2.6. Якщо повернулось більше ніж 10 країн створюємо повідомлення. Якщо відповідь в рамках >2<10 то виводимо тільки назви та флаг (answerCountryList).
Якщо одна країна в пошуку  додаємо інформацію про столицю та населення (answerCountryInfo)
2.6.1. answerCountryList - виводимо тільки назву та флаг, створюємо розмітку HTML зі списку 
+ Однотипна (шаблонна) розмітка створюється із масиву даних кожного разу при введенні запиту повністю видалить і повторно створить всі нащадки елемента.
2.6.2. answerCountryInfo - до answerCountryList додаються додаткові поля (capital, population, languages)